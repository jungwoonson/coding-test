package beakjoon.no15퇴각검색;

import static org.assertj.core.api.Assertions.assertThat;

import beakjoon.InOutputUtil;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.stream.Stream;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

class No2661Test {

    public final ByteArrayOutputStream outputStreamCaptor = new ByteArrayOutputStream();

    @BeforeEach
    void setUp() {
        System.setOut(new PrintStream(outputStreamCaptor));
    }

    @AfterEach
    void tearDown() {
        System.setOut(System.out);
    }

    public static Stream<Arguments> data() {
        return Stream.of(
            Arguments.of("1", "1"),
            Arguments.of("2", "12"),
            Arguments.of("3", "121"),
            Arguments.of("4", "1213"),
            Arguments.of("5", "12131"),
            Arguments.of("6", "121312"),
            Arguments.of("7", "1213121"),
            Arguments.of("8", "12131231"),
            Arguments.of("9", "121312313"),
            Arguments.of("10", "1213123132"),
            Arguments.of("11", "12131231321"),
            Arguments.of("12", "121312313212"),
            Arguments.of("13", "1213123132123"),
            Arguments.of("14", "12131231321231"),
            Arguments.of("15", "121312313212312"),
            Arguments.of("16", "1213123132123121"),
            Arguments.of("17", "12131231321231213"),
            Arguments.of("18", "121312313212312131"),
            Arguments.of("19", "1213123132123121312"),
            Arguments.of("20", "12131231321231213123"),
            Arguments.of("21", "121312313212312131231"),
            Arguments.of("22", "1213123132123121312313"),
            Arguments.of("23", "12131231321231213123132"),
            Arguments.of("24", "121312313212312131231321"),
            Arguments.of("25", "1213123132123121312313212"),
            Arguments.of("26", "12131231321231213123132131"),
            Arguments.of("27", "121312313212312131231321312"),
            Arguments.of("28", "1213123132123121312313213121"),
            Arguments.of("29", "12131231321231213123132131213"),
            Arguments.of("30", "121312313212312131231321312132"),
            Arguments.of("31", "1213123132123121312313213121321"),
            Arguments.of("32", "12131231321231213123132131213212"),
            Arguments.of("33", "121312313212312131231321312132123"),
            Arguments.of("34", "1213123132123121312313213121321231"),
            Arguments.of("35", "12131231321231213123132131213212312"),
            Arguments.of("36", "121312313212312131231321312132123121"),
            Arguments.of("37", "1213123132123121312313213121321231213"),
            Arguments.of("38", "12131231321231213123132131213212312131"),
            Arguments.of("39", "121312313212312131231321312132123121312"),
            Arguments.of("40", "1213123132123121312313213121321231213123"),
            Arguments.of("41", "12131231321231213123132131213212312131231"),
            Arguments.of("42", "121312313212312131231321312132123121312313"),
            Arguments.of("43", "1213123132123121312313213121321231213123132"),
            Arguments.of("44", "12131231321231213123132131213212312131231321"),
            Arguments.of("45", "121312313212312131231321312132123121312313212"),
            Arguments.of("46", "1213123132123121312313213121321231213123132123"),
            Arguments.of("47", "12131231321231213123132131213212312131231321231"),
            Arguments.of("48", "121312313212312131231321312132123121312313212312"),
            Arguments.of("49", "1213123132123121312313213121321231213123132123121"),
            Arguments.of("50", "12131231321231213123132131213212312131231321231213"),
            Arguments.of("51", "121312313212312131231321312132123121312313212312131"),
            Arguments.of("52", "1213123132123121312313213121321231213123132123121312"),
            Arguments.of("53", "12131231321231213123132131213212312131231321231213212"),
            Arguments.of("54", "121312313212312131231321312132123121312313212312132123"),
            Arguments.of("55", "1213123132123121312313213121321231213123132123121321231"),
            Arguments.of("56", "12131231321231213123132131213212312131231321231213212313"),
            Arguments.of("57", "121312313212312131231321312132123121312313212312132123132"),
            Arguments.of("58", "1213123132123121312313213121321231213123132123121321231321"),
            Arguments.of("59", "12131231321231213123132131213212312131231321231213212313212"),
            Arguments.of("60", "121312313212312131231321312132123121312313212312132123132131"),
            Arguments.of("61", "1213123132123121312313213121321231213123132123121321231321312"),
            Arguments.of("62", "12131231321231213123132131213212312131231321231213212313213121"),
            Arguments.of("63", "121312313212312131231321312132123121312313212312132123132131213"),
            Arguments.of("64", "1213123132123121312313213121321231213123132123121321231321312132"),
            Arguments.of("65", "12131231321231213123132131213212312131231321231213212313213121321"),
            Arguments.of("66", "121312313212312131231321312132123121312313212312132123132131213212"),
            Arguments.of("67", "1213123132123121312313213121321231213123132123121321231321312132123"),
            Arguments.of("68", "12131231321231213123132131213212312131231321231213212313213121321231"),
            Arguments.of("69", "121312313212312131231321312132123121312313212312132123132131213212312"),
            Arguments.of("70", "1213123132123121312313213121321231213123132123121321231321312132123121"),
            Arguments.of("71", "12131231321231213123132131213212312131231321231213212313213121321231213"),
            Arguments.of("72", "121312313212312131231321312132123121312313212312132123132131213212312131"),
            Arguments.of("73", "1213123132123121312313213121321231213123132123121321231321312132123121312"),
            Arguments.of("74", "12131231321231213123132131213212312131231321231213212313213121321231213123"),
            Arguments.of("75", "121312313212312131231321312132123121312313212312132123132131213212312131231"),
            Arguments.of("76", "1213123132123121312313213121321231213123132123121321231321312132123121312313"),
            Arguments.of("77", "12131231321231213123132131213212312131231321231213212313213121321231213123132"),
            Arguments.of("78", "121312313212312131231321312132123121312313212312132123132131213212312131231321"),
            Arguments.of("79", "1213123132123121312313213121321231213123132123121321231321312132123121312313212"),
            Arguments.of("80", "12131231321231213123132131213212312131231321231213212313213121321231213123132123")
        );
    }

    @ParameterizedTest
    @MethodSource("data")
    void main(String data, String expected) throws IOException {
        InOutputUtil.setIn(data);

        No2661.main(new String[0]);
        String actual = outputStreamCaptor.toString().trim();

        assertThat(actual).isEqualTo(expected);
    }
}

//  1
//  12
//  121
//  1213
//  12131
//  121312
//  1213121
//  12131231
//  121312313
//  1213123132
//  12131231321
//  121312313212
//  1213123132123
//  12131231321231
//  121312313212312
//  1213123132123121
//  12131231321231213
//  121312313212312131
//  1213123132123121312
//  12131231321231213123
//  121312313212312131231
//  1213123132123121312313
//  12131231321231213123132
//  121312313212312131231321
//  1213123132123121312313212
//  12131231321231213123132131
//  121312313212312131231321312
//  1213123132123121312313213121
//  12131231321231213123132131213
//  121312313212312131231321312132
//  1213123132123121312313213121321
//  12131231321231213123132131213212
//  121312313212312131231321312132123
//  1213123132123121312313213121321231
//  12131231321231213123132131213212312
//  121312313212312131231321312132123121
//  1213123132123121312313213121321231213
//  12131231321231213123132131213212312131
//  121312313212312131231321312132123121312
//  1213123132123121312313213121321231213123
//  12131231321231213123132131213212312131231
//  121312313212312131231321312132123121312313
//  1213123132123121312313213121321231213123132
//  12131231321231213123132131213212312131231321
//  121312313212312131231321312132123121312313212
//  1213123132123121312313213121321231213123132123
//  12131231321231213123132131213212312131231321231
//  121312313212312131231321312132123121312313212312
//  1213123132123121312313213121321231213123132123121
//  12131231321231213123132131213212312131231321231213
//  121312313212312131231321312132123121312313212312131
//  1213123132123121312313213121321231213123132123121312
//  12131231321231213123132131213212312131231321231213212
//  121312313212312131231321312132123121312313212312132123
//  1213123132123121312313213121321231213123132123121321231
//  12131231321231213123132131213212312131231321231213212313
//  121312313212312131231321312132123121312313212312132123132
//  1213123132123121312313213121321231213123132123121321231321
//  12131231321231213123132131213212312131231321231213212313212
//  121312313212312131231321312132123121312313212312132123132131
//  1213123132123121312313213121321231213123132123121321231321312
//  12131231321231213123132131213212312131231321231213212313213121
//  121312313212312131231321312132123121312313212312132123132131213
//  1213123132123121312313213121321231213123132123121321231321312132
//  12131231321231213123132131213212312131231321231213212313213121321
//  121312313212312131231321312132123121312313212312132123132131213212
//  1213123132123121312313213121321231213123132123121321231321312132123
//  12131231321231213123132131213212312131231321231213212313213121321231
//  121312313212312131231321312132123121312313212312132123132131213212312
//  1213123132123121312313213121321231213123132123121321231321312132123121
//  12131231321231213123132131213212312131231321231213212313213121321231213
//  121312313212312131231321312132123121312313212312132123132131213212312131
//  1213123132123121312313213121321231213123132123121321231321312132123121312
//  12131231321231213123132131213212312131231321231213212313213121321231213123
//  121312313212312131231321312132123121312313212312132123132131213212312131231
//  1213123132123121312313213121321231213123132123121321231321312132123121312313
//  12131231321231213123132131213212312131231321231213212313213121321231213123132
//  121312313212312131231321312132123121312313212312132123132131213212312131231321
//  1213123132123121312313213121321231213123132123121321231321312132123121312313212
//  12131231321231213123132131213212312131231321231213212313213121321231213123132123
